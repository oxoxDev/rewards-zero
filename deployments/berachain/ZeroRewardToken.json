{
  "address": "0xe35e2DEC86d09d6F95FF4045985f4054592c5A6e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ControllerDisabled",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSpender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidUnderlying",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "EnumerableMapNonexistentKey",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidWhitelistStatus",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAuthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RemainderLossNotAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockTimestamp",
          "type": "uint256"
        }
      ],
      "name": "LockCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockTimestamp",
          "type": "uint256"
        }
      ],
      "name": "LockRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "remainderReceiver",
          "type": "address"
        }
      ],
      "name": "RemainderReceiverSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "status",
          "type": "uint256"
        }
      ],
      "name": "WhitelistStatusSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WHITELIST_STATUS_ADMIN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WHITELIST_STATUS_DISTRIBUTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WHITELIST_STATUS_NONE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositFor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lockTimestamp",
          "type": "uint256"
        }
      ],
      "name": "getLockedAmountByLockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getLockedAmounts",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getLockedAmountsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getLockedAmountsLockTimestamps",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lockTimestamp",
          "type": "uint256"
        }
      ],
      "name": "getWithdrawAmountsByLockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "remainderReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_remainderReceiver",
          "type": "address"
        }
      ],
      "name": "setRemainderReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "status",
          "type": "uint256"
        }
      ],
      "name": "setWhitelistStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "status",
          "type": "uint256"
        }
      ],
      "name": "setWhitelistStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlying",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistStatus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawTo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lockTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "allowRemainderLoss",
          "type": "bool"
        }
      ],
      "name": "withdrawToByLockTimestamp",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "lockTimestamps",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "allowRemainderLoss",
          "type": "bool"
        }
      ],
      "name": "withdrawToByLockTimestamps",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9b05c9fd1341a1d2d144a7b85dc660143b00231f6e4ed7aaf55ee990f3ec0475",
  "receipt": {
    "to": null,
    "from": "0x0F6e98A756A40dD050dC78959f45559F98d3289d",
    "contractAddress": "0xe35e2DEC86d09d6F95FF4045985f4054592c5A6e",
    "transactionIndex": 9,
    "gasUsed": "1874033",
    "logsBloom": "0x
    "blockHash": "0x460200b8f10c3e65df358520429a85eee5b33bbf21f00b82003c96a874f791de",
    "transactionHash": "0x9b05c9fd1341a1d2d144a7b85dc660143b00231f6e4ed7aaf55ee990f3ec0475",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 3773944,
        "transactionHash": "0x9b05c9fd1341a1d2d144a7b85dc660143b00231f6e4ed7aaf55ee990f3ec0475",
        "address": "0xe35e2DEC86d09d6F95FF4045985f4054592c5A6e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000f6e98a756a40dd050dc78959f45559f98d3289d"
        ],
        "data": "0x",
        "logIndex": 88,
        "blockHash": "0x460200b8f10c3e65df358520429a85eee5b33bbf21f00b82003c96a874f791de"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 3773944,
        "transactionHash": "0x9b05c9fd1341a1d2d144a7b85dc660143b00231f6e4ed7aaf55ee990f3ec0475",
        "address": "0xe35e2DEC86d09d6F95FF4045985f4054592c5A6e",
        "topics": [
          "0xa2697f04f820814f2c44a4a80765636bd7cc0539020abdaccf5b959537c0a542",
          "0x00000000000000000000000054061e18cd88d2de9af3d3d7fdf05472253b29e0"
        ],
        "data": "0x",
        "logIndex": 89,
        "blockHash": "0x460200b8f10c3e65df358520429a85eee5b33bbf21f00b82003c96a874f791de"
      }
    ],
    "blockNumber": 3773944,
    "cumulativeGasUsed": "4336802",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0F6e98A756A40dD050dC78959f45559F98d3289d",
    "0x54061E18cd88D2de9af3D3D7FDF05472253B29E0",
    "0x486E2f66cD5F38772164237C69d8304045eE1651"
  ],
  "numDeployments": 1,
  "solcInputHash": "87d1bbdeeccb8d8e47bf3afc5b9da1c0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ControllerDisabled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ERC20InvalidUnderlying\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"EnumerableMapNonexistentKey\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWhitelistStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RemainderLossNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockTimestamp\",\"type\":\"uint256\"}],\"name\":\"LockCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockTimestamp\",\"type\":\"uint256\"}],\"name\":\"LockRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"remainderReceiver\",\"type\":\"address\"}],\"name\":\"RemainderReceiverSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"WhitelistStatusSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WHITELIST_STATUS_ADMIN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELIST_STATUS_DISTRIBUTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELIST_STATUS_NONE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockTimestamp\",\"type\":\"uint256\"}],\"name\":\"getLockedAmountByLockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLockedAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLockedAmountsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLockedAmountsLockTimestamps\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockTimestamp\",\"type\":\"uint256\"}],\"name\":\"getWithdrawAmountsByLockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainderReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_remainderReceiver\",\"type\":\"address\"}],\"name\":\"setRemainderReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"setWhitelistStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"setWhitelistStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allowRemainderLoss\",\"type\":\"bool\"}],\"name\":\"withdrawToByLockTimestamp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"lockTimestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"allowRemainderLoss\",\"type\":\"bool\"}],\"name\":\"withdrawToByLockTimestamps\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Euler Labs (https://www.eulerlabs.com/)ZeroLend (https://zerolend.xyz/)\",\"custom:security-contact\":\"security@euler.xyz\",\"details\":\"This contract implements a specific unlock schedule for reward tokens. Tokens are unlocked over a 180-day period. 20% is unlocked immediately, and the remaining 80% unlocks linearly over 6 months, reaching full unlock at maturity. The linear unlock starts LOCK_NORMALIZATION_FACTOR after the lock is created.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InvalidUnderlying(address)\":[{\"details\":\"The underlying token couldn't be wrapped.\"}],\"EnumerableMapNonexistentKey(bytes32)\":[{\"details\":\"Query for a nonexistent map key.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"LockCreated(address,uint256)\":{\"params\":{\"account\":\"The address of the account for which the lock was created\",\"lockTimestamp\":\"The normalized timestamp of the created lock\"}},\"LockRemoved(address,uint256)\":{\"params\":{\"account\":\"The address of the account for which the lock was removed\",\"lockTimestamp\":\"The normalized timestamp of the removed lock\"}},\"RemainderReceiverSet(address)\":{\"params\":{\"remainderReceiver\":\"The address of the new remainder receiver\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"},\"WhitelistStatusSet(address,uint256)\":{\"params\":{\"account\":\"The address of the account\",\"status\":\"The new whitelist status\"}}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"params\":{\"_owner\":\"Address of the contract owner\",\"_receiver\":\"Address of the receiver\",\"_underlying\":\"Address of the underlying ERC20 token\"}},\"decimals()\":{\"details\":\"See {ERC20-decimals}.\"},\"depositFor(address,uint256)\":{\"params\":{\"account\":\"The address to deposit tokens for\",\"amount\":\"The amount of tokens to deposit\"},\"returns\":{\"_0\":\"bool indicating success of the deposit\"}},\"getLockedAmountByLockTimestamp(address,uint256)\":{\"params\":{\"account\":\"The address to check\",\"lockTimestamp\":\"The normalized lock timestamp to check\"},\"returns\":{\"_0\":\"The locked amount at the specified timestamp\"}},\"getLockedAmounts(address)\":{\"params\":{\"account\":\"The address to check\"},\"returns\":{\"_0\":\"Two arrays: normalized lock timestamps and corresponding amounts\"}},\"getLockedAmountsLength(address)\":{\"params\":{\"account\":\"The address to check\"},\"returns\":{\"_0\":\"The number of locked amount entries\"}},\"getLockedAmountsLockTimestamps(address)\":{\"params\":{\"account\":\"The address to check\"},\"returns\":{\"_0\":\"An array of normalized lock timestamps\"}},\"getWithdrawAmountsByLockTimestamp(address,uint256)\":{\"params\":{\"account\":\"The address of the account to check\",\"lockTimestamp\":\"The normalized lock timestamp to check for withdraw amounts\"},\"returns\":{\"_0\":\"accountAmount The amount that can be unlocked and sent to the account\",\"_1\":\"remainderAmount The amount that will be transferred to the configured receiver address\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"setRemainderReceiver(address)\":{\"params\":{\"_remainderReceiver\":\"The address of the new remainder receiver. If zero address, the remainder of the tokens\"}},\"setWhitelistStatus(address,uint256)\":{\"params\":{\"account\":\"The address to set the whitelist status for\",\"status\":\"The new whitelist status to set\"}},\"setWhitelistStatus(uint256)\":{\"params\":{\"status\":\"The new whitelist status to set\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The amount of tokens to transfer\",\"to\":\"The address to transfer tokens to\"},\"returns\":{\"_0\":\"bool indicating success of the transfer\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The amount of tokens to transfer\",\"from\":\"The address to transfer tokens from\",\"to\":\"The address to transfer tokens to\"},\"returns\":{\"_0\":\"bool indicating success of the transfer\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"underlying()\":{\"details\":\"Returns the address of the underlying ERC-20 token that is being wrapped.\"},\"withdrawTo(address,uint256)\":{\"params\":{\"account\":\"The address to withdraw tokens to\",\"amount\":\"The amount of tokens to withdraw\"},\"returns\":{\"_0\":\"bool indicating success of the withdrawal\"}},\"withdrawToByLockTimestamp(address,uint256,bool)\":{\"params\":{\"account\":\"The address to receive the withdrawn tokens\",\"allowRemainderLoss\":\"If true, is it allowed for the remainder of the tokens to be transferred to the receiver address configured as per the lock schedule. If false and the calculated remainder amount is non-zero, the withdrawal will revert.\",\"lockTimestamp\":\"The normalized lock timestamp to withdraw tokens for\"},\"returns\":{\"_0\":\"bool indicating success of the withdrawal\"}},\"withdrawToByLockTimestamps(address,uint256[],bool)\":{\"params\":{\"account\":\"The address to receive the withdrawn tokens\",\"allowRemainderLoss\":\"If true, is it allowed for the remainder of the tokens to be transferred to the receiver address configured as per the lock schedule. If false and the calculated remainder amount is non-zero, the withdrawal will revert.\",\"lockTimestamps\":\"An array of normalized lock timestamps to withdraw tokens for\"},\"returns\":{\"_0\":\"bool indicating success of the withdrawal\"}}},\"title\":\"RewardToken\",\"version\":1},\"userdoc\":{\"errors\":{\"InvalidWhitelistStatus()\":[{\"notice\":\"Error thrown when an invalid whitelist status is provided\"}],\"RemainderLossNotAllowed()\":[{\"notice\":\"Thrown when the remainder loss is not allowed but the calculated remainder amount is non-zero\"}]},\"events\":{\"LockCreated(address,uint256)\":{\"notice\":\"Emitted when a new lock is created for an account\"},\"LockRemoved(address,uint256)\":{\"notice\":\"Emitted when a lock is removed for an account\"},\"RemainderReceiverSet(address)\":{\"notice\":\"Emitted when the remainder receiver address is set or changed\"},\"WhitelistStatusSet(address,uint256)\":{\"notice\":\"Emitted when an account's whitelist status changes\"}},\"kind\":\"user\",\"methods\":{\"WHITELIST_STATUS_ADMIN()\":{\"notice\":\"Constant representing admin whitelist status\"},\"WHITELIST_STATUS_DISTRIBUTOR()\":{\"notice\":\"Constant representing distributor whitelist status\"},\"WHITELIST_STATUS_NONE()\":{\"notice\":\"Constant representing no whitelist status\"},\"constructor\":{\"notice\":\"Constructor for RewardToken\"},\"depositFor(address,uint256)\":{\"notice\":\"Deposits tokens for a specified account\"},\"getLockedAmountByLockTimestamp(address,uint256)\":{\"notice\":\"Gets the locked amount for an account at a specific normalized lock timestamp\"},\"getLockedAmounts(address)\":{\"notice\":\"Gets all locked amounts for an account\"},\"getLockedAmountsLength(address)\":{\"notice\":\"Gets the number of locked amount entries for an account\"},\"getLockedAmountsLockTimestamps(address)\":{\"notice\":\"Gets all the normalized lock timestamps of locked amounts for an account\"},\"getWithdrawAmountsByLockTimestamp(address,uint256)\":{\"notice\":\"Calculates the withdraw amounts for a given account and normalized lock timestamp\"},\"remainderReceiver()\":{\"notice\":\"Address that will receive the remainder of the tokens after the lock schedule is applied. If zero address, the remainder of the tokens will be sent to the owner.\"},\"renounceOwnership()\":{\"notice\":\"Disables the ability to renounce ownership of the contract\"},\"setRemainderReceiver(address)\":{\"notice\":\"Sets a new remainder receiver address\"},\"setWhitelistStatus(address,uint256)\":{\"notice\":\"Sets the whitelist status for a specified account\"},\"setWhitelistStatus(uint256)\":{\"notice\":\"Allows a whitelisted account to degrade its own whitelist status\"},\"transfer(address,uint256)\":{\"notice\":\"Transfers tokens to a specified address\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfers tokens from one address to another\"},\"whitelistStatus(address)\":{\"notice\":\"Mapping to store whitelist status of an addresses\"},\"withdrawTo(address,uint256)\":{\"notice\":\"Withdraws tokens to a specified account\"},\"withdrawToByLockTimestamp(address,uint256,bool)\":{\"notice\":\"Withdraws tokens to a specified account based on a specific normalized lock timestamp as per the lock schedule. The remainder of the tokens are transferred to the receiver address configured.\"},\"withdrawToByLockTimestamps(address,uint256[],bool)\":{\"notice\":\"Withdraws tokens to a specified account based on multiple normalized lock timestamps as per the lock schedule. The remainder of the tokens are transferred to the receiver address configured.\"}},\"notice\":\"A wrapper for locked ERC20 tokens that can be withdrawn as per the lock schedule.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RewardToken.sol\":\"RewardToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6ef9389a2c07bc40d8a7ba48914724ab2c108fac391ce12314f01321813e6368\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Wrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/ERC20Wrapper.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20, IERC20Metadata, ERC20} from \\\"../ERC20.sol\\\";\\nimport {SafeERC20} from \\\"../utils/SafeERC20.sol\\\";\\n\\n/**\\n * @dev Extension of the ERC-20 token contract to support token wrapping.\\n *\\n * Users can deposit and withdraw \\\"underlying tokens\\\" and receive a matching number of \\\"wrapped tokens\\\". This is useful\\n * in conjunction with other modules. For example, combining this wrapping mechanism with {ERC20Votes} will allow the\\n * wrapping of an existing \\\"basic\\\" ERC-20 into a governance token.\\n *\\n * WARNING: Any mechanism in which the underlying token changes the {balanceOf} of an account without an explicit transfer\\n * may desynchronize this contract's supply and its underlying balance. Please exercise caution when wrapping tokens that\\n * may undercollateralize the wrapper (i.e. wrapper's total supply is higher than its underlying balance). See {_recover}\\n * for recovering value accrued to the wrapper.\\n */\\nabstract contract ERC20Wrapper is ERC20 {\\n    IERC20 private immutable _underlying;\\n\\n    /**\\n     * @dev The underlying token couldn't be wrapped.\\n     */\\n    error ERC20InvalidUnderlying(address token);\\n\\n    constructor(IERC20 underlyingToken) {\\n        if (underlyingToken == this) {\\n            revert ERC20InvalidUnderlying(address(this));\\n        }\\n        _underlying = underlyingToken;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-decimals}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        try IERC20Metadata(address(_underlying)).decimals() returns (uint8 value) {\\n            return value;\\n        } catch {\\n            return super.decimals();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address of the underlying ERC-20 token that is being wrapped.\\n     */\\n    function underlying() public view returns (IERC20) {\\n        return _underlying;\\n    }\\n\\n    /**\\n     * @dev Allow a user to deposit underlying tokens and mint the corresponding number of wrapped tokens.\\n     */\\n    function depositFor(address account, uint256 value) public virtual returns (bool) {\\n        address sender = _msgSender();\\n        if (sender == address(this)) {\\n            revert ERC20InvalidSender(address(this));\\n        }\\n        if (account == address(this)) {\\n            revert ERC20InvalidReceiver(account);\\n        }\\n        SafeERC20.safeTransferFrom(_underlying, sender, address(this), value);\\n        _mint(account, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Allow a user to burn a number of wrapped tokens and withdraw the corresponding number of underlying tokens.\\n     */\\n    function withdrawTo(address account, uint256 value) public virtual returns (bool) {\\n        if (account == address(this)) {\\n            revert ERC20InvalidReceiver(account);\\n        }\\n        _burn(_msgSender(), value);\\n        SafeERC20.safeTransfer(_underlying, account, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Mint wrapped token to cover any underlyingTokens that would have been transferred by mistake or acquired from\\n     * rebasing mechanisms. Internal function that can be exposed with access control if desired.\\n     */\\n    function _recover(address account) internal virtual returns (uint256) {\\n        uint256 value = _underlying.balanceOf(address(this)) - totalSupply();\\n        _mint(account, value);\\n        return value;\\n    }\\n}\\n\",\"keccak256\":\"0xe2cacb80ff6ca05c0d0a20f2a3a86465dabe77f24804d34c26f26e8bc0f560e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {EnumerableSet} from \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n * - `uint256 -> bytes32` (`UintToBytes32Map`) since v5.1.0\\n * - `address -> address` (`AddressToAddressMap`) since v5.1.0\\n * - `address -> bytes32` (`AddressToBytes32Map`) since v5.1.0\\n * - `bytes32 -> address` (`Bytes32ToAddressMap`) since v5.1.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code repetition as possible, we write it in\\n    // terms of a generic Map type with bytes32 keys and values. The Map implementation uses private functions,\\n    // and user-facing implementations such as `UintToAddressMap` are just wrappers around the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit in bytes32.\\n\\n    /**\\n     * @dev Query for a nonexistent map key.\\n     */\\n    error EnumerableMapNonexistentKey(bytes32 key);\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 key => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToBytes32Map storage map, bytes32 key, bytes32 value) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32 key, bytes32 value) {\\n        bytes32 atKey = map._keys.at(index);\\n        return (atKey, map._values[atKey]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool exists, bytes32 value) {\\n        bytes32 val = map._values[key];\\n        if (val == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, val);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == 0 && !contains(map, key)) {\\n            revert EnumerableMapNonexistentKey(key);\\n        }\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToBytes32Map storage map) internal view returns (bytes32[] memory) {\\n        return map._keys.values();\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToUintMap storage map, uint256 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256 key, uint256 value) {\\n        (bytes32 atKey, bytes32 val) = at(map._inner, index);\\n        return (uint256(atKey), uint256(val));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool exists, uint256 value) {\\n        (bool success, bytes32 val) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(val));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToUintMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256 key, address value) {\\n        (bytes32 atKey, bytes32 val) = at(map._inner, index);\\n        return (uint256(atKey), address(uint160(uint256(val))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool exists, address value) {\\n        (bool success, bytes32 val) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(val))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToAddressMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintToBytes32Map\\n\\n    struct UintToBytes32Map {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToBytes32Map storage map, uint256 key, bytes32 value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToBytes32Map storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToBytes32Map storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToBytes32Map storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToBytes32Map storage map, uint256 index) internal view returns (uint256 key, bytes32 value) {\\n        (bytes32 atKey, bytes32 val) = at(map._inner, index);\\n        return (uint256(atKey), val);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToBytes32Map storage map, uint256 key) internal view returns (bool exists, bytes32 value) {\\n        (bool success, bytes32 val) = tryGet(map._inner, bytes32(key));\\n        return (success, val);\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToBytes32Map storage map, uint256 key) internal view returns (bytes32) {\\n        return get(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToBytes32Map storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(AddressToUintMap storage map, address key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address key, uint256 value) {\\n        (bytes32 atKey, bytes32 val) = at(map._inner, index);\\n        return (address(uint160(uint256(atKey))), uint256(val));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool exists, uint256 value) {\\n        (bool success, bytes32 val) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(val));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(AddressToUintMap storage map) internal view returns (address[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        address[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressToAddressMap\\n\\n    struct AddressToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(AddressToAddressMap storage map, address key, address value) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToAddressMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToAddressMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToAddressMap storage map, uint256 index) internal view returns (address key, address value) {\\n        (bytes32 atKey, bytes32 val) = at(map._inner, index);\\n        return (address(uint160(uint256(atKey))), address(uint160(uint256(val))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToAddressMap storage map, address key) internal view returns (bool exists, address value) {\\n        (bool success, bytes32 val) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, address(uint160(uint256(val))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToAddressMap storage map, address key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(uint256(uint160(key)))))));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(AddressToAddressMap storage map) internal view returns (address[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        address[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressToBytes32Map\\n\\n    struct AddressToBytes32Map {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(AddressToBytes32Map storage map, address key, bytes32 value) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToBytes32Map storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToBytes32Map storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToBytes32Map storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToBytes32Map storage map, uint256 index) internal view returns (address key, bytes32 value) {\\n        (bytes32 atKey, bytes32 val) = at(map._inner, index);\\n        return (address(uint160(uint256(atKey))), val);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToBytes32Map storage map, address key) internal view returns (bool exists, bytes32 value) {\\n        (bool success, bytes32 val) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, val);\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToBytes32Map storage map, address key) internal view returns (bytes32) {\\n        return get(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(AddressToBytes32Map storage map) internal view returns (address[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        address[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToUintMap storage map, bytes32 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32 key, uint256 value) {\\n        (bytes32 atKey, bytes32 val) = at(map._inner, index);\\n        return (atKey, uint256(val));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool exists, uint256 value) {\\n        (bool success, bytes32 val) = tryGet(map._inner, key);\\n        return (success, uint256(val));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToUintMap storage map) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        bytes32[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // Bytes32ToAddressMap\\n\\n    struct Bytes32ToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToAddressMap storage map, bytes32 key, address value) internal returns (bool) {\\n        return set(map._inner, key, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToAddressMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToAddressMap storage map, uint256 index) internal view returns (bytes32 key, address value) {\\n        (bytes32 atKey, bytes32 val) = at(map._inner, index);\\n        return (atKey, address(uint160(uint256(val))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool exists, address value) {\\n        (bool success, bytes32 val) = tryGet(map._inner, key);\\n        return (success, address(uint160(uint256(val))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, key))));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToAddressMap storage map) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        bytes32[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xafb7be6c8945a04bdd080fd6a3a3d0fa0329f1ad0d3bcd431dc1dcf2462d3da9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9b161e97b8967d4bc0c08d25741889a30692cdda4b71910bf1b0e315f1962212\",\"license\":\"MIT\"},\"contracts/ERC20WrapperLocked.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {ERC20Wrapper, ERC20, IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Wrapper.sol\\\";\\nimport {Ownable, Context} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {EnumerableMap} from \\\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\\\";\\n\\n/// @title ERC20WrapperLocked\\n/// @custom:security-contact security@euler.xyz\\n/// @author Euler Labs (https://www.eulerlabs.com/)\\n/// @notice A wrapper for locked ERC20 tokens that can be withdrawn as per the lock schedule.\\n/// @dev Regular wrapping (`depositFor`), unwrapping (`withdrawTo`) are only supported for whitelisted callers with\\n/// an ADMIN whitelist status. Regular ERC20 `transfer` and `transferFrom` are only supported between two whitelisted\\n/// accounts. Under other circumstances, conditions apply; look at the `_update` function. If the account balance is\\n/// non-whitelisted, their tokens can only be withdrawn as per the lock schedule and the remainder of the amount is\\n/// transferred to the receiver address configured. If the account has a DISTRIBUTOR whitelist status, their tokens\\n/// cannot be unwrapped by them, but in order to be unwrapped, they can only be transferred to the account that is not\\n/// whitelisted and become a subject to the locking schedule or transferred to the account with an ADMIN whitelist\\n/// status. A whitelisted account can always degrade their whitelist status and become a subject to the locking\\n/// schedule.\\n/// @dev Avoid giving an ADMIN whitelist status to untrusted addresses. They can be used by non-whitelisted accounts and\\n/// accounts with the DISTRIBUTOR whitelist status to avoid the lock schedule.\\n/// @dev Avoid giving approvals to untrusted spenders. If approved by both a whitelisted account and a non-whitelisted\\n/// account, they can reset the non-whitelisted account's lock schedule.\\n/// @dev The wrapped token is assumed to be well behaved, including not rebasing, not attempting to re-enter this\\n/// wrapper contract, and not presenting any other weird behavior.\\nabstract contract ERC20WrapperLocked is Ownable, ERC20Wrapper {\\n    using EnumerableMap for EnumerableMap.UintToUintMap;\\n    using SafeERC20 for IERC20;\\n\\n    error NotAuthorized();\\n    error ControllerDisabled();\\n\\n    /// @notice The factor used to normalize lock timestamps to daily intervals\\n    /// @dev This constant is used to round down timestamps to the nearest day when creating locks\\n    uint256 internal constant LOCK_NORMALIZATION_FACTOR = 1 days;\\n\\n    /// @notice Scaling factor for percentage calculations\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @notice Constant representing no whitelist status\\n    uint256 public constant WHITELIST_STATUS_NONE = 0;\\n\\n    /// @notice Constant representing admin whitelist status\\n    uint256 public constant WHITELIST_STATUS_ADMIN = 1;\\n\\n    /// @notice Constant representing distributor whitelist status\\n    uint256 public constant WHITELIST_STATUS_DISTRIBUTOR = 2;\\n\\n    /// @notice Address that will receive the remainder of the tokens after the lock schedule is applied. If zero\\n    /// address, the remainder of the tokens will be sent to the owner.\\n    address public remainderReceiver;\\n\\n    /// @notice Mapping to store whitelist status of an addresses\\n    mapping(address => uint256) public whitelistStatus;\\n\\n    /// @notice Mapping to store locked token amount for each address and normalized lock timestamp\\n    mapping(address => EnumerableMap.UintToUintMap) internal lockedAmounts;\\n\\n    /// @notice Emitted when the remainder receiver address is set or changed\\n    /// @param remainderReceiver The address of the new remainder receiver\\n    event RemainderReceiverSet(address indexed remainderReceiver);\\n\\n    /// @notice Emitted when an account's whitelist status changes\\n    /// @param account The address of the account\\n    /// @param status The new whitelist status\\n    event WhitelistStatusSet(address indexed account, uint256 status);\\n\\n    /// @notice Emitted when a new lock is created for an account\\n    /// @param account The address of the account for which the lock was created\\n    /// @param lockTimestamp The normalized timestamp of the created lock\\n    event LockCreated(address indexed account, uint256 lockTimestamp);\\n\\n    /// @notice Emitted when a lock is removed for an account\\n    /// @param account The address of the account for which the lock was removed\\n    /// @param lockTimestamp The normalized timestamp of the removed lock\\n    event LockRemoved(address indexed account, uint256 lockTimestamp);\\n\\n    /// @notice Error thrown when an invalid whitelist status is provided\\n    error InvalidWhitelistStatus();\\n\\n    /// @notice Thrown when the remainder loss is not allowed but the calculated remainder amount is non-zero\\n    error RemainderLossNotAllowed();\\n\\n    /// @notice Modifier to restrict function access to the whitelisted addresses\\n    /// @param account The address to check for whitelist status\\n    modifier onlyWhitelisted(address account) {\\n        if (whitelistStatus[account] == WHITELIST_STATUS_NONE) revert NotAuthorized();\\n        _;\\n    }\\n\\n    /// @notice Modifier to restrict function access to the whitelisted ADMIN addresses\\n    /// @param account The address to check for whitelist status\\n    modifier onlyWhitelistedAdmin(address account) {\\n        if (whitelistStatus[account] != WHITELIST_STATUS_ADMIN) revert NotAuthorized();\\n        _;\\n    }\\n\\n    /// @notice Constructor for ERC20WrapperLocked\\n    /// @param _owner Address of the contract owner\\n    /// @param _remainderReceiver Address that will receive the remainder of the tokens after the lock schedule is\\n    /// applied. If zero address, the remainder of the tokens will be sent to the owner.\\n    /// @param _underlying Address of the underlying ERC20 token\\n    /// @param _name Name of the wrapper token\\n    /// @param _symbol Symbol of the wrapper token\\n    constructor(\\n        address _owner,\\n        address _remainderReceiver,\\n        address _underlying,\\n        string memory _name,\\n        string memory _symbol\\n    ) Ownable(_owner) ERC20Wrapper(IERC20(_underlying)) ERC20(_name, _symbol) {\\n        remainderReceiver = _remainderReceiver;\\n        emit RemainderReceiverSet(_remainderReceiver);\\n    }\\n\\n    /// @notice Disables the ability to renounce ownership of the contract\\n    function renounceOwnership() public pure override {\\n        revert NotAuthorized();\\n    }\\n\\n    /// @notice Sets a new remainder receiver address\\n    /// @param _remainderReceiver The address of the new remainder receiver. If zero address, the remainder of the\\n    /// tokens\\n    function setRemainderReceiver(address _remainderReceiver) public onlyOwner {\\n        if (remainderReceiver != _remainderReceiver) {\\n            remainderReceiver = _remainderReceiver;\\n            emit RemainderReceiverSet(_remainderReceiver);\\n        }\\n    }\\n\\n    /// @notice Sets the whitelist status for a specified account\\n    /// @param account The address to set the whitelist status for\\n    /// @param status The new whitelist status to set\\n    function setWhitelistStatus(address account, uint256 status) public onlyOwner {\\n        if (whitelistStatus[account] != status) _setWhitelistStatus(account, status);\\n    }\\n\\n    /// @notice Allows a whitelisted account to degrade its own whitelist status\\n    /// @param status The new whitelist status to set\\n    function setWhitelistStatus(uint256 status) public onlyWhitelisted(_msgSender()) {\\n        address account = _msgSender();\\n        if (whitelistStatus[account] != status) {\\n            if (status == WHITELIST_STATUS_ADMIN) {\\n                revert NotAuthorized();\\n            } else {\\n                _setWhitelistStatus(account, status);\\n            }\\n        }\\n    }\\n\\n    /// @notice Deposits tokens for a specified account\\n    /// @param account The address to deposit tokens for\\n    /// @param amount The amount of tokens to deposit\\n    /// @return bool indicating success of the deposit\\n    function depositFor(address account, uint256 amount)\\n        public\\n        virtual\\n        override\\n        onlyWhitelistedAdmin(_msgSender())\\n        returns (bool)\\n    {\\n        return super.depositFor(account, amount);\\n    }\\n\\n    /// @notice Withdraws tokens to a specified account\\n    /// @param account The address to withdraw tokens to\\n    /// @param amount The amount of tokens to withdraw\\n    /// @return bool indicating success of the withdrawal\\n    function withdrawTo(address account, uint256 amount)\\n        public\\n        virtual\\n        override\\n        onlyWhitelistedAdmin(_msgSender())\\n        returns (bool)\\n    {\\n        return super.withdrawTo(account, amount);\\n    }\\n\\n    /// @notice Transfers tokens to a specified address\\n    /// @param to The address to transfer tokens to\\n    /// @param amount The amount of tokens to transfer\\n    /// @return bool indicating success of the transfer\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        return super.transfer(to, amount);\\n    }\\n\\n    /// @notice Transfers tokens from one address to another\\n    /// @param from The address to transfer tokens from\\n    /// @param to The address to transfer tokens to\\n    /// @param amount The amount of tokens to transfer\\n    /// @return bool indicating success of the transfer\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        return super.transferFrom(from, to, amount);\\n    }\\n\\n    /// @notice Withdraws tokens to a specified account based on a specific normalized lock timestamp as per the lock\\n    /// schedule. The remainder of the tokens are transferred to the receiver address configured.\\n    /// @param account The address to receive the withdrawn tokens\\n    /// @param lockTimestamp The normalized lock timestamp to withdraw tokens for\\n    /// @param allowRemainderLoss If true, is it allowed for the remainder of the tokens to be transferred to the\\n    /// receiver address configured as per the lock schedule. If false and the calculated remainder amount is non-zero,\\n    /// the withdrawal will revert.\\n    /// @return bool indicating success of the withdrawal\\n    function withdrawToByLockTimestamp(address account, uint256 lockTimestamp, bool allowRemainderLoss)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        uint256[] memory lockTimestamps = new uint256[](1);\\n        lockTimestamps[0] = lockTimestamp;\\n        return withdrawToByLockTimestamps(account, lockTimestamps, allowRemainderLoss);\\n    }\\n\\n    /// @notice Withdraws tokens to a specified account based on multiple normalized lock timestamps as per the lock\\n    /// schedule.\\n    /// The remainder of the tokens are transferred to the receiver address configured.\\n    /// @param account The address to receive the withdrawn tokens\\n    /// @param lockTimestamps An array of normalized lock timestamps to withdraw tokens for\\n    /// @param allowRemainderLoss If true, is it allowed for the remainder of the tokens to be transferred to the\\n    /// receiver address configured as per the lock schedule. If false and the calculated remainder amount is non-zero,\\n    /// the withdrawal will revert.\\n    /// @return bool indicating success of the withdrawal\\n    function withdrawToByLockTimestamps(address account, uint256[] memory lockTimestamps, bool allowRemainderLoss)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        IERC20 asset = underlying();\\n        address sender = _msgSender();\\n\\n        uint256 totalAccountAmount;\\n        uint256 totalRemainderAmount;\\n        for (uint256 i = 0; i < lockTimestamps.length; ++i) {\\n            uint256 lockTimestamp = lockTimestamps[i];\\n            (uint256 accountAmount, uint256 remainderAmount) = getWithdrawAmountsByLockTimestamp(sender, lockTimestamp);\\n\\n            if (lockedAmounts[sender].remove(lockTimestamp)) {\\n                emit LockRemoved(sender, lockTimestamp);\\n            }\\n\\n            totalAccountAmount += accountAmount;\\n            totalRemainderAmount += remainderAmount;\\n        }\\n\\n        _burn(sender, totalAccountAmount + totalRemainderAmount);\\n        asset.safeTransfer(account, totalAccountAmount);\\n\\n        if (totalRemainderAmount != 0) {\\n            if (!allowRemainderLoss) revert RemainderLossNotAllowed();\\n\\n            address receiver = remainderReceiver;\\n            asset.safeTransfer(receiver == address(0) ? owner() : receiver, totalRemainderAmount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice Calculates the withdraw amounts for a given account and normalized lock timestamp\\n    /// @param account The address of the account to check\\n    /// @param lockTimestamp The normalized lock timestamp to check for withdraw amounts\\n    /// @return accountAmount The amount that can be unlocked and sent to the account\\n    /// @return remainderAmount The amount that will be transferred to the configured receiver address\\n    function getWithdrawAmountsByLockTimestamp(address account, uint256 lockTimestamp)\\n        public\\n        view\\n        virtual\\n        returns (uint256, uint256)\\n    {\\n        (, uint256 amount) = lockedAmounts[account].tryGet(lockTimestamp);\\n        uint256 accountShare = _calculateUnlockShare(lockTimestamp);\\n        uint256 accountAmount = amount * accountShare / SCALE;\\n        uint256 remainderAmount = amount - accountAmount;\\n        return (accountAmount, remainderAmount);\\n    }\\n\\n    /// @notice Gets the number of locked amount entries for an account\\n    /// @param account The address to check\\n    /// @return The number of locked amount entries\\n    function getLockedAmountsLength(address account) public view returns (uint256) {\\n        return lockedAmounts[account].length();\\n    }\\n\\n    /// @notice Gets all the normalized lock timestamps of locked amounts for an account\\n    /// @param account The address to check\\n    /// @return An array of normalized lock timestamps\\n    function getLockedAmountsLockTimestamps(address account) public view returns (uint256[] memory) {\\n        return lockedAmounts[account].keys();\\n    }\\n\\n    /// @notice Gets the locked amount for an account at a specific normalized lock timestamp\\n    /// @param account The address to check\\n    /// @param lockTimestamp The normalized lock timestamp to check\\n    /// @return The locked amount at the specified timestamp\\n    function getLockedAmountByLockTimestamp(address account, uint256 lockTimestamp) public view returns (uint256) {\\n        (, uint256 amount) = lockedAmounts[account].tryGet(lockTimestamp);\\n        return amount;\\n    }\\n\\n    /// @notice Gets all locked amounts for an account\\n    /// @param account The address to check\\n    /// @return Two arrays: normalized lock timestamps and corresponding amounts\\n    function getLockedAmounts(address account) public view returns (uint256[] memory, uint256[] memory) {\\n        EnumerableMap.UintToUintMap storage map = lockedAmounts[account];\\n        uint256[] memory lockTimestamps = map.keys();\\n        uint256[] memory amounts = new uint256[](lockTimestamps.length);\\n\\n        for (uint256 i = 0; i < lockTimestamps.length; i++) {\\n            amounts[i] = map.get(lockTimestamps[i]);\\n        }\\n\\n        return (lockTimestamps, amounts);\\n    }\\n\\n    /// @notice Internal function to update balances\\n    /// @dev Regular ERC20 transfers are only supported between two whitelisted addresses. When the amount is\\n    /// transferred from non-whitelisted address to a whitelisted address, the locked amount entries get subsequently\\n    /// removed starting from the oldest lock, up to the point when the whole requested amount is transferred freely.\\n    /// When the amount is transferred from a whitelisted address to a non-whitelisted address, the amount is locked as\\n    /// per the lock schedule. Transfers from a non-whitelisted address to another non-whitelisted address are not\\n    /// supported and will revert.\\n    /// @param from Address to transfer from\\n    /// @param to Address to transfer to\\n    /// @param amount Amount to transfer\\n    function _update(address from, address to, uint256 amount) internal virtual override {\\n        if (amount != 0) {\\n            bool fromIsWhitelisted = whitelistStatus[from] != WHITELIST_STATUS_NONE;\\n            bool toIsWhitelisted = whitelistStatus[to] != WHITELIST_STATUS_NONE;\\n\\n            if ((from == address(0) || fromIsWhitelisted) && to != address(0) && !toIsWhitelisted) {\\n                // Covers minting and transfers from whitelisted to non-whitelisted\\n                EnumerableMap.UintToUintMap storage map = lockedAmounts[to];\\n                uint256 normalizedTimestamp = _getNormalizedTimestamp();\\n                (, uint256 currentAmount) = map.tryGet(normalizedTimestamp);\\n\\n                if (map.set(normalizedTimestamp, currentAmount + amount)) {\\n                    emit LockCreated(to, normalizedTimestamp);\\n                }\\n            } else if (!fromIsWhitelisted && toIsWhitelisted) {\\n                // Covers transfers from non-whitelisted to whitelisted\\n                EnumerableMap.UintToUintMap storage map = lockedAmounts[from];\\n                uint256[] memory lockTimestamps = map.keys();\\n                uint256 unlockedAmount;\\n\\n                for (uint256 i = 0; i < lockTimestamps.length; ++i) {\\n                    uint256 lockTimestamp = lockTimestamps[i];\\n                    uint256 currentAmount = map.get(lockTimestamp);\\n\\n                    if (unlockedAmount + currentAmount > amount) {\\n                        uint256 releasedAmount = amount - unlockedAmount;\\n                        map.set(lockTimestamp, currentAmount - releasedAmount);\\n                        currentAmount = releasedAmount;\\n                    } else {\\n                        map.remove(lockTimestamp);\\n                        emit LockRemoved(from, lockTimestamp);\\n                    }\\n\\n                    unlockedAmount += currentAmount;\\n\\n                    if (unlockedAmount >= amount) break;\\n                }\\n            } else if (from != address(0) && !fromIsWhitelisted && to != address(0) && !toIsWhitelisted) {\\n                // Covers transfers from non-whitelisted to non-whitelisted\\n                revert NotAuthorized();\\n            }\\n        }\\n\\n        // For burning and transfers from whitelisted to whitelisted, no special handling needs to be done.\\n        // `_setWhitelistStatus` ensures that only non-whitelisted accounts can have locked amounts\\n        super._update(from, to, amount);\\n    }\\n\\n    /// @notice Sets the whitelist status for an account\\n    /// @dev If the account is being whitelisted, all locked amounts are removed, resulting in all tokens being\\n    /// unlocked. If the account is being removed from the whitelist, the current account balance is locked. A side\\n    /// effect of this behavior is that the owner (and by extension, approved token spenders) can modify the lock\\n    /// schedule for users. For example, by adding and then removing the account from the whitelist, or by transferring\\n    /// tokens from a non-whitelisted account to a whitelisted account and back, the owner and approved token spenders\\n    /// can reset the unlock schedule for that account. It should be noted that the ability to modify whitelist status\\n    /// and its effects on locks is a core feature of this contract. On the other hand, regular users must be vigilant\\n    /// about which addresses they approve to spend their locked tokens which is not unlike other ERC20 approvals.\\n    /// @param account The address to set the whitelist status for\\n    /// @param status The whitelist status to set\\n    function _setWhitelistStatus(address account, uint256 status) internal {\\n        if (status > WHITELIST_STATUS_DISTRIBUTOR) revert InvalidWhitelistStatus();\\n\\n        if (status == WHITELIST_STATUS_NONE) {\\n            uint256 amount = balanceOf(account);\\n            if (amount != 0) {\\n                uint256 normalizedTimestamp = _getNormalizedTimestamp();\\n                lockedAmounts[account].set(normalizedTimestamp, amount);\\n                emit LockCreated(account, normalizedTimestamp);\\n            }\\n        } else {\\n            EnumerableMap.UintToUintMap storage map = lockedAmounts[account];\\n            uint256[] memory lockTimestamps = map.keys();\\n            for (uint256 i = 0; i < lockTimestamps.length; ++i) {\\n                map.remove(lockTimestamps[i]);\\n                emit LockRemoved(account, lockTimestamps[i]);\\n            }\\n        }\\n\\n        whitelistStatus[account] = status;\\n        emit WhitelistStatusSet(account, status);\\n    }\\n\\n    /// @notice Calculates the share of tokens that can be unlocked based on the lock timestamp\\n    /// @dev This function should be overridden by the child contract to implement the specific unlock schedule\\n    /// @param lockTimestamp The timestamp when the tokens were locked\\n    /// @return The share of tokens that can be freely unlocked (in basis points)\\n    function _calculateUnlockShare(uint256 lockTimestamp) internal view virtual returns (uint256);\\n\\n    /// @notice Internal function to get the normalized timestamp\\n    /// @return The normalized timestamp (rounded down to the nearest day)\\n    function _getNormalizedTimestamp() internal view virtual returns (uint256) {\\n        return block.timestamp - (block.timestamp % LOCK_NORMALIZATION_FACTOR);\\n    }\\n}\\n\",\"keccak256\":\"0x98cf5ff20c8bf194c3f8bea2f0af94574ad8d271dd3ee2c16feead30ed44f948\",\"license\":\"GPL-2.0-or-later\"},\"contracts/RewardToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {ERC20WrapperLocked} from \\\"./ERC20WrapperLocked.sol\\\";\\n\\n/// @title RewardToken\\n/// @custom:security-contact security@euler.xyz\\n/// @author Euler Labs (https://www.eulerlabs.com/)\\n/// @author ZeroLend (https://zerolend.xyz/)\\n/// @notice A wrapper for locked ERC20 tokens that can be withdrawn as per the lock schedule.\\n/// @dev This contract implements a specific unlock schedule for reward tokens. Tokens are unlocked over a 180-day\\n/// period. 20% is unlocked immediately, and the remaining 80% unlocks linearly over 6 months, reaching full unlock at\\n/// maturity. The linear unlock starts LOCK_NORMALIZATION_FACTOR after the lock is created.\\ncontract RewardToken is ERC20WrapperLocked {\\n    /// @notice Constructor for RewardToken\\n    /// @param _owner Address of the contract owner\\n    /// @param _receiver Address of the receiver\\n    /// @param _underlying Address of the underlying ERC20 token\\n    constructor(address _owner, address _receiver, address _underlying)\\n        ERC20WrapperLocked(_owner, _receiver, _underlying, \\\"ZeroLend Reward Token\\\", \\\"ZEROr\\\")\\n    {}\\n\\n    /// @notice Calculates the share of tokens that can be unlocked based on the lock timestamp\\n    /// @param lockTimestamp The timestamp when the tokens were locked\\n    /// @return The share of tokens that can be freely unlocked (in basis points)\\n    function _calculateUnlockShare(uint256 lockTimestamp) internal view virtual override returns (uint256) {\\n        if (lockTimestamp > block.timestamp) return 0;\\n\\n        unchecked {\\n            uint256 timeElapsed = block.timestamp - lockTimestamp;\\n\\n            if (timeElapsed <= LOCK_NORMALIZATION_FACTOR) {\\n                return 0.2e18;\\n            } else if (timeElapsed >= 180 days) {\\n                return SCALE;\\n            } else {\\n                return\\n                    (timeElapsed - LOCK_NORMALIZATION_FACTOR) * 0.8e18 / (180 days - LOCK_NORMALIZATION_FACTOR) + 0.2e18;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8ea0237b25ddd857e3d4aa07b49fd1afd6596d43f9d0c3881528f0abc8318040\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516122c53803806122c583398101604081905261002f916101dd565b8282826040518060400160405280601581526020017f5a65726f4c656e642052657761726420546f6b656e0000000000000000000000815250604051806040016040528060058152602001642d22a927b960d91b8152508282828760006001600160a01b0316816001600160a01b0316036100c557604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6100ce81610171565b5060046100db83826102bf565b5060056100e882826102bf565b5050306001600160a01b0383160390506101175760405163438d6fe360e01b81523060048201526024016100bc565b6001600160a01b03908116608052600680546001600160a01b03191691861691821790556040517fa2697f04f820814f2c44a4a80765636bd7cc0539020abdaccf5b959537c0a54290600090a2505050505050505061037d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146101d857600080fd5b919050565b6000806000606084860312156101f257600080fd5b6101fb846101c1565b9250610209602085016101c1565b9150610217604085016101c1565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168061024a57607f821691505b60208210810361026a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156102ba57806000526020600020601f840160051c810160208510156102975750805b601f840160051c820191505b818110156102b757600081556001016102a3565b50505b505050565b81516001600160401b038111156102d8576102d8610220565b6102ec816102e68454610236565b84610270565b6020601f82116001811461032057600083156103085750848201515b600019600385901b1c1916600184901b1784556102b7565b600084815260208120601f198516915b828110156103505787850151825560209485019460019092019101610330565b508482101561036e5786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b608051611f116103b460003960008181610331015281816107070152818161094401528181610e620152610f200152611f116000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80636f307dc31161010457806395d89b41116100a2578063ccaf1c4b11610071578063ccaf1c4b1461040f578063dd62ed3e1461042f578063e186935214610468578063f2fde38b1461049057600080fd5b806395d89b41146103e4578063a9059cbb146103ec578063bd95c017146103ff578063cac01cbc1461040757600080fd5b80638a677c9f116100de5780638a677c9f1461039a5780638d2589b0146103ad5780638da5cb5b146103c057806390797498146103d157600080fd5b80636f307dc31461032f57806370a0823114610369578063715018a61461039257600080fd5b8063224b8d6e1161017c578063313ce5671161014b578063313ce567146102ce578063421a10de146102e8578063612d793d146102fb57806367f747ef1461031c57600080fd5b8063224b8d6e14610275578063235d94f31461028857806323b872dd146102a85780632f4f21e2146102bb57600080fd5b806318160ddd116101b857806318160ddd146102325780631ab27b951461023a5780631b70209a1461024d578063205c28781461026257600080fd5b8063015f011e146101df57806306fdde03146101fa578063095ea7b31461020f575b600080fd5b6101e7600181565b6040519081526020015b60405180910390f35b6102026104a3565b6040516101f19190611ad8565b61022261021d366004611b3d565b610535565b60405190151581526020016101f1565b6003546101e7565b610222610248366004611b77565b61054f565b61026061025b366004611b3d565b6105a8565b005b610222610270366004611b3d565b6105dd565b610260610283366004611bb3565b610622565b61029b610296366004611bcc565b610695565b6040516101f19190611c23565b6102226102b6366004611c36565b6106b9565b6102226102c9366004611b3d565b6106c6565b6102d6610703565b60405160ff90911681526020016101f1565b6101e76102f6366004611b3d565b610793565b61030e610309366004611bcc565b6107b7565b6040516101f1929190611c73565b61026061032a366004611bcc565b610891565b7f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b0390911681526020016101f1565b6101e7610377366004611bcc565b6001600160a01b031660009081526001602052604090205490565b610260610906565b6101e76103a8366004611bcc565b61091f565b600654610351906001600160a01b031681565b6000546001600160a01b0316610351565b6102226103df366004611cae565b610940565b610202610ae0565b6102226103fa366004611b3d565b610aef565b6101e7600281565b6101e7600081565b6101e761041d366004611bcc565b60076020526000908152604090205481565b6101e761043d366004611d94565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b61047b610476366004611b3d565b610b02565b604080519283526020830191909152016101f1565b61026061049e366004611bcc565b610b76565b6060600480546104b290611dc7565b80601f01602080910402602001604051908101604052809291908181526020018280546104de90611dc7565b801561052b5780601f106105005761010080835404028352916020019161052b565b820191906000526020600020905b81548152906001019060200180831161050e57829003601f168201915b5050505050905090565b600033610543818585610bcf565b60019150505b92915050565b60408051600180825281830190925260009182919060208083019080368337019050509050838160008151811061058857610588611dfb565b60200260200101818152505061059f858285610940565b95945050505050565b6105b0610bdc565b6001600160a01b03821660009081526007602052604090205481146105d9576105d98282610c24565b5050565b336000818152600760205260408120549091906001146106105760405163ea8e4eb560e01b815260040160405180910390fd5b61061a8484610e1d565b949350505050565b3360008181526007602052604090205461064f5760405163ea8e4eb560e01b815260040160405180910390fd5b33600081815260076020526040902054831461069057600183036106865760405163ea8e4eb560e01b815260040160405180910390fd5b6106908184610c24565b505050565b6001600160a01b038116600090815260086020526040902060609061054990610e91565b600061061a848484610e9e565b336000818152600760205260408120549091906001146106f95760405163ea8e4eb560e01b815260040160405180910390fd5b61061a8484610ec2565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561077f575060408051601f3d908101601f1916820190925261077c91810190611e11565b60015b61078e5750601290565b905090565b919050565b6001600160a01b0382166000908152600860205260408120819061059f9084610f51565b6001600160a01b03811660009081526008602052604081206060918291906107de82610e91565b90506000815167ffffffffffffffff8111156107fc576107fc611c98565b604051908082528060200260200182016040528015610825578160200160208202803683370190505b50905060005b82518110156108855761086083828151811061084957610849611dfb565b602002602001015185610f6d90919063ffffffff16565b82828151811061087257610872611dfb565b602090810291909101015260010161082b565b50909590945092505050565b610899610bdc565b6006546001600160a01b03828116911614610903576006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517fa2697f04f820814f2c44a4a80765636bd7cc0539020abdaccf5b959537c0a54290600090a25b50565b60405163ea8e4eb560e01b815260040160405180910390fd5b6001600160a01b038116600090815260086020526040812061054990610f79565b60007f0000000000000000000000000000000000000000000000000000000000000000338280805b8751811015610a3257600088828151811061098557610985611dfb565b6020026020010151905060008061099c8784610b02565b6001600160a01b038916600090815260086020526040902091935091506109c39084610f84565b15610a0c57866001600160a01b03167f5981e4d35a45c9e8c96ae51ca0f24127eaad820537621c89bbe1ba8b1712b61b84604051610a0391815260200190565b60405180910390a25b610a168287611e4a565b9550610a228186611e4a565b9450505050806001019050610968565b50610a4683610a418385611e4a565b610f90565b610a5a6001600160a01b0385168984610fc6565b8015610ad25785610a97576040517f93c4aad800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006546001600160a01b0316610ad08115610ab25781610abf565b6000546001600160a01b03165b6001600160a01b0387169084610fc6565b505b506001979650505050505050565b6060600580546104b290611dc7565b6000610afb838361103a565b9392505050565b6001600160a01b038216600090815260086020526040812081908190610b289085610f51565b9150506000610b3685611048565b90506000670de0b6b3a7640000610b4d8385611e5d565b610b579190611e8a565b90506000610b658285611e9e565b9195509093505050505b9250929050565b610b7e610bdc565b6001600160a01b038116610bc6576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024015b60405180910390fd5b610903816110c0565b610690838383600161111d565b6000546001600160a01b03163314610c22576040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152602401610bbd565b565b6002811115610c5f576040517fd5fb0c3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80610cff576001600160a01b0382166000908152600160205260409020548015610cf9576000610c8d611225565b6001600160a01b0385166000908152600860205260409020909150610cb390828461123e565b50836001600160a01b03167f68f4429ffe70afd17cd51d3c12265a7698579e0dc36b7099e2f6d5263e739d3982604051610cef91815260200190565b60405180910390a2505b50610dc4565b6001600160a01b038216600090815260086020526040812090610d2182610e91565b905060005b8151811015610dc057610d5b828281518110610d4457610d44611dfb565b602002602001015184610f8490919063ffffffff16565b50846001600160a01b03167f5981e4d35a45c9e8c96ae51ca0f24127eaad820537621c89bbe1ba8b1712b61b838381518110610d9957610d99611dfb565b6020026020010151604051610db091815260200190565b60405180910390a2600101610d26565b5050505b6001600160a01b03821660008181526007602052604090819020839055517faa5d9115062744c4c316306720e23b83bac0a85ffd8fc0b0a43cb9e457fc62b390610e119084815260200190565b60405180910390a25050565b6000306001600160a01b03841603610e535760405163ec442f0560e01b81526001600160a01b0384166004820152602401610bbd565b610e5d3383610f90565b610e887f00000000000000000000000000000000000000000000000000000000000000008484610fc6565b50600192915050565b60606000610afb8361124b565b600033610eac858285611256565b610eb78585856112e8565b506001949350505050565b600033308103610ee757604051634b637e8f60e11b8152306004820152602401610bbd565b306001600160a01b03851603610f1b5760405163ec442f0560e01b81526001600160a01b0385166004820152602401610bbd565b610f477f0000000000000000000000000000000000000000000000000000000000000000823086611347565b6105438484611380565b6000808080610f6086866113b6565b9097909650945050505050565b6000610afb83836113f0565b600061054982611450565b6000610afb838361145b565b6001600160a01b038216610fba57604051634b637e8f60e11b815260006004820152602401610bbd565b6105d982600083611478565b6040516001600160a01b0383811660248301526044820183905261069091859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506116fd565b6000336105438185856112e8565b60004282111561105a57506000919050565b4282900362015180811161107857506702c68af0bb14000092915050565b62ed4e0081106110925750670de0b6b3a764000092915050565b62ebfc80670b1a2bc2ec5000006201517f19830102046702c68af0bb14000001915050919050565b50919050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038416611160576040517fe602df0500000000000000000000000000000000000000000000000000000000815260006004820152602401610bbd565b6001600160a01b0383166111a3576040517f94280d6200000000000000000000000000000000000000000000000000000000815260006004820152602401610bbd565b6001600160a01b038085166000908152600260209081526040808320938716835292905220829055801561121f57826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161121691815260200190565b60405180910390a35b50505050565b60006112346201518042611eb1565b6107899042611e9e565b600061061a848484611787565b6060610549826117a4565b6001600160a01b0383811660009081526002602090815260408083209386168352929052205460001981101561121f57818110156112d9576040517ffb8f41b20000000000000000000000000000000000000000000000000000000081526001600160a01b03841660048201526024810182905260448101839052606401610bbd565b61121f8484848403600061111d565b6001600160a01b03831661131257604051634b637e8f60e11b815260006004820152602401610bbd565b6001600160a01b03821661133c5760405163ec442f0560e01b815260006004820152602401610bbd565b610690838383611478565b6040516001600160a01b03848116602483015283811660448301526064820183905261121f9186918216906323b872dd90608401610ff3565b6001600160a01b0382166113aa5760405163ec442f0560e01b815260006004820152602401610bbd565b6105d960008383611478565b60008181526002830160205260408120548190806113e5576113d885856117b1565b925060009150610b6f9050565b600192509050610b6f565b600081815260028301602052604081205480158015611416575061141484846117b1565b155b15610afb576040517f02b5668600000000000000000000000000000000000000000000000000000000815260048101849052602401610bbd565b6000610549826117bd565b60008181526002830160205260408120819055610afb83836117c7565b80156116f2576001600160a01b038084166000818152600760205260408082205493861682529020549115159115159015806114b15750815b80156114c557506001600160a01b03841615155b80156114cf575080155b1561156e576001600160a01b0384166000908152600860205260408120906114f5611225565b905060006115038383610f51565b915061151d9050826115158884611e4a565b85919061123e565b1561156657866001600160a01b03167f68f4429ffe70afd17cd51d3c12265a7698579e0dc36b7099e2f6d5263e739d398360405161155d91815260200190565b60405180910390a25b5050506116ef565b811580156115795750805b1561169d576001600160a01b0385166000908152600860205260408120906115a082610e91565b90506000805b82518110156116945760008382815181106115c3576115c3611dfb565b6020026020010151905060006115e28287610f6d90919063ffffffff16565b9050886115ef8286611e4a565b1115611621576000611601858b611e9e565b9050611619836116118385611e9e565b89919061123e565b509050611670565b61162b8683610f84565b508a6001600160a01b03167f5981e4d35a45c9e8c96ae51ca0f24127eaad820537621c89bbe1ba8b1712b61b8360405161166791815260200190565b60405180910390a25b61167a8185611e4a565b935088841061168a575050611694565b50506001016115a6565b505050506116ef565b6001600160a01b038516158015906116b3575081155b80156116c757506001600160a01b03841615155b80156116d1575080155b156116ef5760405163ea8e4eb560e01b815260040160405180910390fd5b50505b6106908383836117d3565b600080602060008451602086016000885af180611720576040513d6000823e3d81fd5b50506000513d91508115611738578060011415611745565b6001600160a01b0384163b155b1561121f576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401610bbd565b6000828152600284016020526040812082905561061a8484611916565b60606000610afb83611922565b6000610afb838361197e565b6000610549825490565b6000610afb8383611996565b6001600160a01b0383166117fe5780600360008282546117f39190611e4a565b909155506118899050565b6001600160a01b0383166000908152600160205260409020548181101561186a576040517fe450d38c0000000000000000000000000000000000000000000000000000000081526001600160a01b03851660048201526024810182905260448101839052606401610bbd565b6001600160a01b03841660009081526001602052604090209082900390555b6001600160a01b0382166118a5576003805482900390556118c4565b6001600160a01b03821660009081526001602052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161190991815260200190565b60405180910390a3505050565b6000610afb8383611a89565b60608160000180548060200260200160405190810160405280929190818152602001828054801561197257602002820191906000526020600020905b81548152602001906001019080831161195e575b50505050509050919050565b60008181526001830160205260408120541515610afb565b60008181526001830160205260408120548015611a7f5760006119ba600183611e9e565b85549091506000906119ce90600190611e9e565b9050808214611a335760008660000182815481106119ee576119ee611dfb565b9060005260206000200154905080876000018481548110611a1157611a11611dfb565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611a4457611a44611ec5565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610549565b6000915050610549565b6000818152600183016020526040812054611ad057508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610549565b506000610549565b602081526000825180602084015260005b81811015611b065760208186018101516040868401015201611ae9565b506000604082850101526040601f19601f83011684010191505092915050565b80356001600160a01b038116811461078e57600080fd5b60008060408385031215611b5057600080fd5b611b5983611b26565b946020939093013593505050565b8035801515811461078e57600080fd5b600080600060608486031215611b8c57600080fd5b611b9584611b26565b925060208401359150611baa60408501611b67565b90509250925092565b600060208284031215611bc557600080fd5b5035919050565b600060208284031215611bde57600080fd5b610afb82611b26565b600081518084526020840193506020830160005b82811015611c19578151865260209586019590910190600101611bfb565b5093949350505050565b602081526000610afb6020830184611be7565b600080600060608486031215611c4b57600080fd5b611c5484611b26565b9250611c6260208501611b26565b929592945050506040919091013590565b604081526000611c866040830185611be7565b828103602084015261059f8185611be7565b634e487b7160e01b600052604160045260246000fd5b600080600060608486031215611cc357600080fd5b611ccc84611b26565b9250602084013567ffffffffffffffff811115611ce857600080fd5b8401601f81018613611cf957600080fd5b803567ffffffffffffffff811115611d1357611d13611c98565b8060051b604051601f19603f830116810181811067ffffffffffffffff82111715611d4057611d40611c98565b604052918252602081840181019290810189841115611d5e57600080fd5b6020850194505b83851015611d8157843580825260209586019590935001611d65565b509450611baa9250505060408501611b67565b60008060408385031215611da757600080fd5b611db083611b26565b9150611dbe60208401611b26565b90509250929050565b600181811c90821680611ddb57607f821691505b6020821081036110ba57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600060208284031215611e2357600080fd5b815160ff81168114610afb57600080fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561054957610549611e34565b808202811582820484141761054957610549611e34565b634e487b7160e01b600052601260045260246000fd5b600082611e9957611e99611e74565b500490565b8181038181111561054957610549611e34565b600082611ec057611ec0611e74565b500690565b634e487b7160e01b600052603160045260246000fdfea264697066735822122027c6bdcbc84885c1d437bbdb8280ec9c82e6b8678a55c6d6ec6bb0441bdd48ae64736f6c634300081c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c80636f307dc31161010457806395d89b41116100a2578063ccaf1c4b11610071578063ccaf1c4b1461040f578063dd62ed3e1461042f578063e186935214610468578063f2fde38b1461049057600080fd5b806395d89b41146103e4578063a9059cbb146103ec578063bd95c017146103ff578063cac01cbc1461040757600080fd5b80638a677c9f116100de5780638a677c9f1461039a5780638d2589b0146103ad5780638da5cb5b146103c057806390797498146103d157600080fd5b80636f307dc31461032f57806370a0823114610369578063715018a61461039257600080fd5b8063224b8d6e1161017c578063313ce5671161014b578063313ce567146102ce578063421a10de146102e8578063612d793d146102fb57806367f747ef1461031c57600080fd5b8063224b8d6e14610275578063235d94f31461028857806323b872dd146102a85780632f4f21e2146102bb57600080fd5b806318160ddd116101b857806318160ddd146102325780631ab27b951461023a5780631b70209a1461024d578063205c28781461026257600080fd5b8063015f011e146101df57806306fdde03146101fa578063095ea7b31461020f575b600080fd5b6101e7600181565b6040519081526020015b60405180910390f35b6102026104a3565b6040516101f19190611ad8565b61022261021d366004611b3d565b610535565b60405190151581526020016101f1565b6003546101e7565b610222610248366004611b77565b61054f565b61026061025b366004611b3d565b6105a8565b005b610222610270366004611b3d565b6105dd565b610260610283366004611bb3565b610622565b61029b610296366004611bcc565b610695565b6040516101f19190611c23565b6102226102b6366004611c36565b6106b9565b6102226102c9366004611b3d565b6106c6565b6102d6610703565b60405160ff90911681526020016101f1565b6101e76102f6366004611b3d565b610793565b61030e610309366004611bcc565b6107b7565b6040516101f1929190611c73565b61026061032a366004611bcc565b610891565b7f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b0390911681526020016101f1565b6101e7610377366004611bcc565b6001600160a01b031660009081526001602052604090205490565b610260610906565b6101e76103a8366004611bcc565b61091f565b600654610351906001600160a01b031681565b6000546001600160a01b0316610351565b6102226103df366004611cae565b610940565b610202610ae0565b6102226103fa366004611b3d565b610aef565b6101e7600281565b6101e7600081565b6101e761041d366004611bcc565b60076020526000908152604090205481565b6101e761043d366004611d94565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b61047b610476366004611b3d565b610b02565b604080519283526020830191909152016101f1565b61026061049e366004611bcc565b610b76565b6060600480546104b290611dc7565b80601f01602080910402602001604051908101604052809291908181526020018280546104de90611dc7565b801561052b5780601f106105005761010080835404028352916020019161052b565b820191906000526020600020905b81548152906001019060200180831161050e57829003601f168201915b5050505050905090565b600033610543818585610bcf565b60019150505b92915050565b60408051600180825281830190925260009182919060208083019080368337019050509050838160008151811061058857610588611dfb565b60200260200101818152505061059f858285610940565b95945050505050565b6105b0610bdc565b6001600160a01b03821660009081526007602052604090205481146105d9576105d98282610c24565b5050565b336000818152600760205260408120549091906001146106105760405163ea8e4eb560e01b815260040160405180910390fd5b61061a8484610e1d565b949350505050565b3360008181526007602052604090205461064f5760405163ea8e4eb560e01b815260040160405180910390fd5b33600081815260076020526040902054831461069057600183036106865760405163ea8e4eb560e01b815260040160405180910390fd5b6106908184610c24565b505050565b6001600160a01b038116600090815260086020526040902060609061054990610e91565b600061061a848484610e9e565b336000818152600760205260408120549091906001146106f95760405163ea8e4eb560e01b815260040160405180910390fd5b61061a8484610ec2565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561077f575060408051601f3d908101601f1916820190925261077c91810190611e11565b60015b61078e5750601290565b905090565b919050565b6001600160a01b0382166000908152600860205260408120819061059f9084610f51565b6001600160a01b03811660009081526008602052604081206060918291906107de82610e91565b90506000815167ffffffffffffffff8111156107fc576107fc611c98565b604051908082528060200260200182016040528015610825578160200160208202803683370190505b50905060005b82518110156108855761086083828151811061084957610849611dfb565b602002602001015185610f6d90919063ffffffff16565b82828151811061087257610872611dfb565b602090810291909101015260010161082b565b50909590945092505050565b610899610bdc565b6006546001600160a01b03828116911614610903576006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517fa2697f04f820814f2c44a4a80765636bd7cc0539020abdaccf5b959537c0a54290600090a25b50565b60405163ea8e4eb560e01b815260040160405180910390fd5b6001600160a01b038116600090815260086020526040812061054990610f79565b60007f0000000000000000000000000000000000000000000000000000000000000000338280805b8751811015610a3257600088828151811061098557610985611dfb565b6020026020010151905060008061099c8784610b02565b6001600160a01b038916600090815260086020526040902091935091506109c39084610f84565b15610a0c57866001600160a01b03167f5981e4d35a45c9e8c96ae51ca0f24127eaad820537621c89bbe1ba8b1712b61b84604051610a0391815260200190565b60405180910390a25b610a168287611e4a565b9550610a228186611e4a565b9450505050806001019050610968565b50610a4683610a418385611e4a565b610f90565b610a5a6001600160a01b0385168984610fc6565b8015610ad25785610a97576040517f93c4aad800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006546001600160a01b0316610ad08115610ab25781610abf565b6000546001600160a01b03165b6001600160a01b0387169084610fc6565b505b506001979650505050505050565b6060600580546104b290611dc7565b6000610afb838361103a565b9392505050565b6001600160a01b038216600090815260086020526040812081908190610b289085610f51565b9150506000610b3685611048565b90506000670de0b6b3a7640000610b4d8385611e5d565b610b579190611e8a565b90506000610b658285611e9e565b9195509093505050505b9250929050565b610b7e610bdc565b6001600160a01b038116610bc6576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024015b60405180910390fd5b610903816110c0565b610690838383600161111d565b6000546001600160a01b03163314610c22576040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152602401610bbd565b565b6002811115610c5f576040517fd5fb0c3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80610cff576001600160a01b0382166000908152600160205260409020548015610cf9576000610c8d611225565b6001600160a01b0385166000908152600860205260409020909150610cb390828461123e565b50836001600160a01b03167f68f4429ffe70afd17cd51d3c12265a7698579e0dc36b7099e2f6d5263e739d3982604051610cef91815260200190565b60405180910390a2505b50610dc4565b6001600160a01b038216600090815260086020526040812090610d2182610e91565b905060005b8151811015610dc057610d5b828281518110610d4457610d44611dfb565b602002602001015184610f8490919063ffffffff16565b50846001600160a01b03167f5981e4d35a45c9e8c96ae51ca0f24127eaad820537621c89bbe1ba8b1712b61b838381518110610d9957610d99611dfb565b6020026020010151604051610db091815260200190565b60405180910390a2600101610d26565b5050505b6001600160a01b03821660008181526007602052604090819020839055517faa5d9115062744c4c316306720e23b83bac0a85ffd8fc0b0a43cb9e457fc62b390610e119084815260200190565b60405180910390a25050565b6000306001600160a01b03841603610e535760405163ec442f0560e01b81526001600160a01b0384166004820152602401610bbd565b610e5d3383610f90565b610e887f00000000000000000000000000000000000000000000000000000000000000008484610fc6565b50600192915050565b60606000610afb8361124b565b600033610eac858285611256565b610eb78585856112e8565b506001949350505050565b600033308103610ee757604051634b637e8f60e11b8152306004820152602401610bbd565b306001600160a01b03851603610f1b5760405163ec442f0560e01b81526001600160a01b0385166004820152602401610bbd565b610f477f0000000000000000000000000000000000000000000000000000000000000000823086611347565b6105438484611380565b6000808080610f6086866113b6565b9097909650945050505050565b6000610afb83836113f0565b600061054982611450565b6000610afb838361145b565b6001600160a01b038216610fba57604051634b637e8f60e11b815260006004820152602401610bbd565b6105d982600083611478565b6040516001600160a01b0383811660248301526044820183905261069091859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506116fd565b6000336105438185856112e8565b60004282111561105a57506000919050565b4282900362015180811161107857506702c68af0bb14000092915050565b62ed4e0081106110925750670de0b6b3a764000092915050565b62ebfc80670b1a2bc2ec5000006201517f19830102046702c68af0bb14000001915050919050565b50919050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038416611160576040517fe602df0500000000000000000000000000000000000000000000000000000000815260006004820152602401610bbd565b6001600160a01b0383166111a3576040517f94280d6200000000000000000000000000000000000000000000000000000000815260006004820152602401610bbd565b6001600160a01b038085166000908152600260209081526040808320938716835292905220829055801561121f57826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161121691815260200190565b60405180910390a35b50505050565b60006112346201518042611eb1565b6107899042611e9e565b600061061a848484611787565b6060610549826117a4565b6001600160a01b0383811660009081526002602090815260408083209386168352929052205460001981101561121f57818110156112d9576040517ffb8f41b20000000000000000000000000000000000000000000000000000000081526001600160a01b03841660048201526024810182905260448101839052606401610bbd565b61121f8484848403600061111d565b6001600160a01b03831661131257604051634b637e8f60e11b815260006004820152602401610bbd565b6001600160a01b03821661133c5760405163ec442f0560e01b815260006004820152602401610bbd565b610690838383611478565b6040516001600160a01b03848116602483015283811660448301526064820183905261121f9186918216906323b872dd90608401610ff3565b6001600160a01b0382166113aa5760405163ec442f0560e01b815260006004820152602401610bbd565b6105d960008383611478565b60008181526002830160205260408120548190806113e5576113d885856117b1565b925060009150610b6f9050565b600192509050610b6f565b600081815260028301602052604081205480158015611416575061141484846117b1565b155b15610afb576040517f02b5668600000000000000000000000000000000000000000000000000000000815260048101849052602401610bbd565b6000610549826117bd565b60008181526002830160205260408120819055610afb83836117c7565b80156116f2576001600160a01b038084166000818152600760205260408082205493861682529020549115159115159015806114b15750815b80156114c557506001600160a01b03841615155b80156114cf575080155b1561156e576001600160a01b0384166000908152600860205260408120906114f5611225565b905060006115038383610f51565b915061151d9050826115158884611e4a565b85919061123e565b1561156657866001600160a01b03167f68f4429ffe70afd17cd51d3c12265a7698579e0dc36b7099e2f6d5263e739d398360405161155d91815260200190565b60405180910390a25b5050506116ef565b811580156115795750805b1561169d576001600160a01b0385166000908152600860205260408120906115a082610e91565b90506000805b82518110156116945760008382815181106115c3576115c3611dfb565b6020026020010151905060006115e28287610f6d90919063ffffffff16565b9050886115ef8286611e4a565b1115611621576000611601858b611e9e565b9050611619836116118385611e9e565b89919061123e565b509050611670565b61162b8683610f84565b508a6001600160a01b03167f5981e4d35a45c9e8c96ae51ca0f24127eaad820537621c89bbe1ba8b1712b61b8360405161166791815260200190565b60405180910390a25b61167a8185611e4a565b935088841061168a575050611694565b50506001016115a6565b505050506116ef565b6001600160a01b038516158015906116b3575081155b80156116c757506001600160a01b03841615155b80156116d1575080155b156116ef5760405163ea8e4eb560e01b815260040160405180910390fd5b50505b6106908383836117d3565b600080602060008451602086016000885af180611720576040513d6000823e3d81fd5b50506000513d91508115611738578060011415611745565b6001600160a01b0384163b155b1561121f576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401610bbd565b6000828152600284016020526040812082905561061a8484611916565b60606000610afb83611922565b6000610afb838361197e565b6000610549825490565b6000610afb8383611996565b6001600160a01b0383166117fe5780600360008282546117f39190611e4a565b909155506118899050565b6001600160a01b0383166000908152600160205260409020548181101561186a576040517fe450d38c0000000000000000000000000000000000000000000000000000000081526001600160a01b03851660048201526024810182905260448101839052606401610bbd565b6001600160a01b03841660009081526001602052604090209082900390555b6001600160a01b0382166118a5576003805482900390556118c4565b6001600160a01b03821660009081526001602052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161190991815260200190565b60405180910390a3505050565b6000610afb8383611a89565b60608160000180548060200260200160405190810160405280929190818152602001828054801561197257602002820191906000526020600020905b81548152602001906001019080831161195e575b50505050509050919050565b60008181526001830160205260408120541515610afb565b60008181526001830160205260408120548015611a7f5760006119ba600183611e9e565b85549091506000906119ce90600190611e9e565b9050808214611a335760008660000182815481106119ee576119ee611dfb565b9060005260206000200154905080876000018481548110611a1157611a11611dfb565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611a4457611a44611ec5565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610549565b6000915050610549565b6000818152600183016020526040812054611ad057508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610549565b506000610549565b602081526000825180602084015260005b81811015611b065760208186018101516040868401015201611ae9565b506000604082850101526040601f19601f83011684010191505092915050565b80356001600160a01b038116811461078e57600080fd5b60008060408385031215611b5057600080fd5b611b5983611b26565b946020939093013593505050565b8035801515811461078e57600080fd5b600080600060608486031215611b8c57600080fd5b611b9584611b26565b925060208401359150611baa60408501611b67565b90509250925092565b600060208284031215611bc557600080fd5b5035919050565b600060208284031215611bde57600080fd5b610afb82611b26565b600081518084526020840193506020830160005b82811015611c19578151865260209586019590910190600101611bfb565b5093949350505050565b602081526000610afb6020830184611be7565b600080600060608486031215611c4b57600080fd5b611c5484611b26565b9250611c6260208501611b26565b929592945050506040919091013590565b604081526000611c866040830185611be7565b828103602084015261059f8185611be7565b634e487b7160e01b600052604160045260246000fd5b600080600060608486031215611cc357600080fd5b611ccc84611b26565b9250602084013567ffffffffffffffff811115611ce857600080fd5b8401601f81018613611cf957600080fd5b803567ffffffffffffffff811115611d1357611d13611c98565b8060051b604051601f19603f830116810181811067ffffffffffffffff82111715611d4057611d40611c98565b604052918252602081840181019290810189841115611d5e57600080fd5b6020850194505b83851015611d8157843580825260209586019590935001611d65565b509450611baa9250505060408501611b67565b60008060408385031215611da757600080fd5b611db083611b26565b9150611dbe60208401611b26565b90509250929050565b600181811c90821680611ddb57607f821691505b6020821081036110ba57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600060208284031215611e2357600080fd5b815160ff81168114610afb57600080fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561054957610549611e34565b808202811582820484141761054957610549611e34565b634e487b7160e01b600052601260045260246000fd5b600082611e9957611e99611e74565b500490565b8181038181111561054957610549611e34565b600082611ec057611ec0611e74565b500690565b634e487b7160e01b600052603160045260246000fdfea264697066735822122027c6bdcbc84885c1d437bbdb8280ec9c82e6b8678a55c6d6ec6bb0441bdd48ae64736f6c634300081c0033",
  "devdoc": {
    "author": "Euler Labs (https://www.eulerlabs.com/)ZeroLend (https://zerolend.xyz/)",
    "custom:security-contact": "security@euler.xyz",
    "details": "This contract implements a specific unlock schedule for reward tokens. Tokens are unlocked over a 180-day period. 20% is unlocked immediately, and the remaining 80% unlocks linearly over 6 months, reaching full unlock at maturity. The linear unlock starts LOCK_NORMALIZATION_FACTOR after the lock is created.",
    "errors": {
      "ERC20InsufficientAllowance(address,uint256,uint256)": [
        {
          "details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
          "params": {
            "allowance": "Amount of tokens a `spender` is allowed to operate with.",
            "needed": "Minimum amount required to perform a transfer.",
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC20InsufficientBalance(address,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC20InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSpender(address)": [
        {
          "details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
          "params": {
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC20InvalidUnderlying(address)": [
        {
          "details": "The underlying token couldn't be wrapped."
        }
      ],
      "EnumerableMapNonexistentKey(bytes32)": [
        {
          "details": "Query for a nonexistent map key."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "LockCreated(address,uint256)": {
        "params": {
          "account": "The address of the account for which the lock was created",
          "lockTimestamp": "The normalized timestamp of the created lock"
        }
      },
      "LockRemoved(address,uint256)": {
        "params": {
          "account": "The address of the account for which the lock was removed",
          "lockTimestamp": "The normalized timestamp of the removed lock"
        }
      },
      "RemainderReceiverSet(address)": {
        "params": {
          "remainderReceiver": "The address of the new remainder receiver"
        }
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      },
      "WhitelistStatusSet(address,uint256)": {
        "params": {
          "account": "The address of the account",
          "status": "The new whitelist status"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "constructor": {
        "params": {
          "_owner": "Address of the contract owner",
          "_receiver": "Address of the receiver",
          "_underlying": "Address of the underlying ERC20 token"
        }
      },
      "decimals()": {
        "details": "See {ERC20-decimals}."
      },
      "depositFor(address,uint256)": {
        "params": {
          "account": "The address to deposit tokens for",
          "amount": "The amount of tokens to deposit"
        },
        "returns": {
          "_0": "bool indicating success of the deposit"
        }
      },
      "getLockedAmountByLockTimestamp(address,uint256)": {
        "params": {
          "account": "The address to check",
          "lockTimestamp": "The normalized lock timestamp to check"
        },
        "returns": {
          "_0": "The locked amount at the specified timestamp"
        }
      },
      "getLockedAmounts(address)": {
        "params": {
          "account": "The address to check"
        },
        "returns": {
          "_0": "Two arrays: normalized lock timestamps and corresponding amounts"
        }
      },
      "getLockedAmountsLength(address)": {
        "params": {
          "account": "The address to check"
        },
        "returns": {
          "_0": "The number of locked amount entries"
        }
      },
      "getLockedAmountsLockTimestamps(address)": {
        "params": {
          "account": "The address to check"
        },
        "returns": {
          "_0": "An array of normalized lock timestamps"
        }
      },
      "getWithdrawAmountsByLockTimestamp(address,uint256)": {
        "params": {
          "account": "The address of the account to check",
          "lockTimestamp": "The normalized lock timestamp to check for withdraw amounts"
        },
        "returns": {
          "_0": "accountAmount The amount that can be unlocked and sent to the account",
          "_1": "remainderAmount The amount that will be transferred to the configured receiver address"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "setRemainderReceiver(address)": {
        "params": {
          "_remainderReceiver": "The address of the new remainder receiver. If zero address, the remainder of the tokens"
        }
      },
      "setWhitelistStatus(address,uint256)": {
        "params": {
          "account": "The address to set the whitelist status for",
          "status": "The new whitelist status to set"
        }
      },
      "setWhitelistStatus(uint256)": {
        "params": {
          "status": "The new whitelist status to set"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "The amount of tokens to transfer",
          "to": "The address to transfer tokens to"
        },
        "returns": {
          "_0": "bool indicating success of the transfer"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "The amount of tokens to transfer",
          "from": "The address to transfer tokens from",
          "to": "The address to transfer tokens to"
        },
        "returns": {
          "_0": "bool indicating success of the transfer"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "underlying()": {
        "details": "Returns the address of the underlying ERC-20 token that is being wrapped."
      },
      "withdrawTo(address,uint256)": {
        "params": {
          "account": "The address to withdraw tokens to",
          "amount": "The amount of tokens to withdraw"
        },
        "returns": {
          "_0": "bool indicating success of the withdrawal"
        }
      },
      "withdrawToByLockTimestamp(address,uint256,bool)": {
        "params": {
          "account": "The address to receive the withdrawn tokens",
          "allowRemainderLoss": "If true, is it allowed for the remainder of the tokens to be transferred to the receiver address configured as per the lock schedule. If false and the calculated remainder amount is non-zero, the withdrawal will revert.",
          "lockTimestamp": "The normalized lock timestamp to withdraw tokens for"
        },
        "returns": {
          "_0": "bool indicating success of the withdrawal"
        }
      },
      "withdrawToByLockTimestamps(address,uint256[],bool)": {
        "params": {
          "account": "The address to receive the withdrawn tokens",
          "allowRemainderLoss": "If true, is it allowed for the remainder of the tokens to be transferred to the receiver address configured as per the lock schedule. If false and the calculated remainder amount is non-zero, the withdrawal will revert.",
          "lockTimestamps": "An array of normalized lock timestamps to withdraw tokens for"
        },
        "returns": {
          "_0": "bool indicating success of the withdrawal"
        }
      }
    },
    "title": "RewardToken",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InvalidWhitelistStatus()": [
        {
          "notice": "Error thrown when an invalid whitelist status is provided"
        }
      ],
      "RemainderLossNotAllowed()": [
        {
          "notice": "Thrown when the remainder loss is not allowed but the calculated remainder amount is non-zero"
        }
      ]
    },
    "events": {
      "LockCreated(address,uint256)": {
        "notice": "Emitted when a new lock is created for an account"
      },
      "LockRemoved(address,uint256)": {
        "notice": "Emitted when a lock is removed for an account"
      },
      "RemainderReceiverSet(address)": {
        "notice": "Emitted when the remainder receiver address is set or changed"
      },
      "WhitelistStatusSet(address,uint256)": {
        "notice": "Emitted when an account's whitelist status changes"
      }
    },
    "kind": "user",
    "methods": {
      "WHITELIST_STATUS_ADMIN()": {
        "notice": "Constant representing admin whitelist status"
      },
      "WHITELIST_STATUS_DISTRIBUTOR()": {
        "notice": "Constant representing distributor whitelist status"
      },
      "WHITELIST_STATUS_NONE()": {
        "notice": "Constant representing no whitelist status"
      },
      "constructor": {
        "notice": "Constructor for RewardToken"
      },
      "depositFor(address,uint256)": {
        "notice": "Deposits tokens for a specified account"
      },
      "getLockedAmountByLockTimestamp(address,uint256)": {
        "notice": "Gets the locked amount for an account at a specific normalized lock timestamp"
      },
      "getLockedAmounts(address)": {
        "notice": "Gets all locked amounts for an account"
      },
      "getLockedAmountsLength(address)": {
        "notice": "Gets the number of locked amount entries for an account"
      },
      "getLockedAmountsLockTimestamps(address)": {
        "notice": "Gets all the normalized lock timestamps of locked amounts for an account"
      },
      "getWithdrawAmountsByLockTimestamp(address,uint256)": {
        "notice": "Calculates the withdraw amounts for a given account and normalized lock timestamp"
      },
      "remainderReceiver()": {
        "notice": "Address that will receive the remainder of the tokens after the lock schedule is applied. If zero address, the remainder of the tokens will be sent to the owner."
      },
      "renounceOwnership()": {
        "notice": "Disables the ability to renounce ownership of the contract"
      },
      "setRemainderReceiver(address)": {
        "notice": "Sets a new remainder receiver address"
      },
      "setWhitelistStatus(address,uint256)": {
        "notice": "Sets the whitelist status for a specified account"
      },
      "setWhitelistStatus(uint256)": {
        "notice": "Allows a whitelisted account to degrade its own whitelist status"
      },
      "transfer(address,uint256)": {
        "notice": "Transfers tokens to a specified address"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfers tokens from one address to another"
      },
      "whitelistStatus(address)": {
        "notice": "Mapping to store whitelist status of an addresses"
      },
      "withdrawTo(address,uint256)": {
        "notice": "Withdraws tokens to a specified account"
      },
      "withdrawToByLockTimestamp(address,uint256,bool)": {
        "notice": "Withdraws tokens to a specified account based on a specific normalized lock timestamp as per the lock schedule. The remainder of the tokens are transferred to the receiver address configured."
      },
      "withdrawToByLockTimestamps(address,uint256[],bool)": {
        "notice": "Withdraws tokens to a specified account based on multiple normalized lock timestamps as per the lock schedule. The remainder of the tokens are transferred to the receiver address configured."
      }
    },
    "notice": "A wrapper for locked ERC20 tokens that can be withdrawn as per the lock schedule.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/RewardToken.sol:RewardToken",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 397,
        "contract": "contracts/RewardToken.sol:RewardToken",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 403,
        "contract": "contracts/RewardToken.sol:RewardToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 405,
        "contract": "contracts/RewardToken.sol:RewardToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 407,
        "contract": "contracts/RewardToken.sol:RewardToken",
        "label": "_name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 409,
        "contract": "contracts/RewardToken.sol:RewardToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 4355,
        "contract": "contracts/RewardToken.sol:RewardToken",
        "label": "remainderReceiver",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 4360,
        "contract": "contracts/RewardToken.sol:RewardToken",
        "label": "whitelistStatus",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4366,
        "contract": "contracts/RewardToken.sol:RewardToken",
        "label": "lockedAmounts",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(UintToUintMap)1893_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(UintToUintMap)1893_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableMap.UintToUintMap)",
        "numberOfBytes": "32",
        "value": "t_struct(UintToUintMap)1893_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Bytes32Set)3895_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 3894,
            "contract": "contracts/RewardToken.sol:RewardToken",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3701_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32ToBytes32Map)1679_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Bytes32ToBytes32Map",
        "members": [
          {
            "astId": 1674,
            "contract": "contracts/RewardToken.sol:RewardToken",
            "label": "_keys",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32Set)3895_storage"
          },
          {
            "astId": 1678,
            "contract": "contracts/RewardToken.sol:RewardToken",
            "label": "_values",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)3701_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3696,
            "contract": "contracts/RewardToken.sol:RewardToken",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3700,
            "contract": "contracts/RewardToken.sol:RewardToken",
            "label": "_positions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintToUintMap)1893_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.UintToUintMap",
        "members": [
          {
            "astId": 1892,
            "contract": "contracts/RewardToken.sol:RewardToken",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32ToBytes32Map)1679_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}